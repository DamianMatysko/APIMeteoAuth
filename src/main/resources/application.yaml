server:
  port: '9090'
spring:
  jpa:
    database: POSTGRESQL
    show-sql: 'true'
    generate-ddl: 'true'
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: 'true'
        dialect: org.hibernate.dialect.PostgreSQLDialect

  datasource:
    platform: postgres
    url: 'jdbc:postgresql://localhost:5432/db_meteoauth'
    username: postgres
    password: pass

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 294783079570-2r2nvbf3efafklbsrhp5p47ukr2si94j.apps.googleusercontent.com
            clientSecret: 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
          facebook:
            clientId: 641104487053125
            clientSecret: 0b24875f4981119fed371870d57563b2
          github:
            clientId: bd47c3f64bdfc0d4aeaa
            clientSecret: 7e17df59b2c10ca8454c24804d96880d6a1cdde2
          linkedin:
            clientId: <your-client-id>
            clientSecret: <your-client-secret>
            client-authentication-method: post
            authorization-grant-type: authorization_code
            scope: 'r_liteprofile, r_emailaddress'
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            client-name: Linkedin
            provider: linkedin
        provider:
          facebook:
            user-info-uri: 'https://graph.facebook.com/me?fields'
          linkedin:
            authorization-uri: 'https://www.linkedin.com/oauth/v2/authorization'
            token-uri: 'https://www.linkedin.com/oauth/v2/accessToken'
            user-info-uri: 'https://api.linkedin.com/v2/me'
            user-name-attribute: id

app:
  auth:
    tokenSecret: amFub3NlYw==
    tokenExpirationMsec: '21600000'
    refreshTokenExpirationMsec: '864000000'
  oauth2:
    authorizedRedirectUris:
      - http://localhost:4200/login

logging:
  level:
    org:
      springframework:
        security: DEBUG